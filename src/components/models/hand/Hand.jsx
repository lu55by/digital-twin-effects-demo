/* eslint-disable react/no-unknown-property */
/* eslint-disable no-unused-vars */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import {
  Decal,
  PerspectiveCamera,
  RenderTexture,
  Text,
  useGLTF,
  useTexture,
} from "@react-three/drei";
import { Color } from "three";
import { useControls } from "leva";
import { useFrame } from "@react-three/fiber";
import { HologramMaterial } from "../../shaders/js/HologramMaterial";
import HandDecal from "./HandDecal";

const hologramMaterial = HologramMaterial;

export default function Hand(props) {
  // const { nodes, materials } = useGLTF("./models/hand.glb");
  const { nodes, materials } = useGLTF("./models/Hand/mergedHand.glb");
  // console.log(nodes)
  // console.log(materials)

  const { handPos, showDecal } = useControls(
    "HandProp",
    {
      handPos: {
        value: { x: 0, y: 57, z: 51 },
        min: -50,
        max: 200,
        step: 1,
        label: "Position",
      },
      showDecal: {
        value: false,
        label: "Show Decal",
      },
    },
    { order: 2 }
  );

  const handRef = useRef(null);
  useEffect(() => {
    handRef.current.material = hologramMaterial;
  }, [handRef]);

  const groupRef = useRef(null);
  useFrame((state, delta) => {
    const elapsed = state.clock.elapsedTime;
    // Hologram Material
    hologramMaterial.uniforms.uTime.value = elapsed;
    // Hand
    groupRef.current.position.z = Math.sin(elapsed * 0.5) * 50;
    groupRef.current.rotation.y += delta;
  });

  return (
    <group
      {...props}
      position={[handPos.x, handPos.y, handPos.z]}
      dispose={null}
      ref={groupRef}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.hand.geometry}
        ref={handRef}
      >
        {/* <meshStandardMaterial color="white" roughness={1} metalness={0} /> */}
        {showDecal && <HandDecal />}

        {/* 
          Ref img decal test 
        */}
        {/* <Decal 
          debug 
          map={tex} 
          // position={[.5, 0, 0]} 
          position={[decalProp.position.x, decalProp.position.y, decalProp.position.z]}
          rotation={[decalProp.rotation.x, decalProp.rotation.y, decalProp.rotation.z]}
          map-anisotropy={decalProp.anisotropy}
        /> */}
      </mesh>

      <mesh
        // castShadow
        // receiveShadow
        geometry={nodes.thumbNail.geometry}
        material={hologramMaterial}
      >
        {/* <meshStandardMaterial color="white" roughness={0.2} metalness={0.5} /> */}
        {/* <Decal 
          debug
          // position={[-1.0, 1.75, 0.6]} 
          position={[0, 0, 0]} 
          rotation={-0.7} 
          scale={0.25} 
          map={tex} 
          map-anisotropy={16}
        /> */}
      </mesh>

      <mesh
        // castShadow
        // receiveShadow
        geometry={nodes.indexNail.geometry}
        // material={nodes.indexNail.material}
        material={hologramMaterial}
      >
        {/* <meshStandardMaterial color="white" roughness={0.2} metalness={0.5} /> */}
      </mesh>

      <mesh
        castShadow
        receiveShadow
        geometry={nodes.middleNail.geometry}
        // material={nodes.middleNail.material}
        material={hologramMaterial}
      >
        {/* <meshStandardMaterial color="white" roughness={0.2} metalness={0.5} /> */}
      </mesh>

      <mesh
        // castShadow
        // receiveShadow
        geometry={nodes.namelessNail.geometry}
        // material={nodes.namelessNail.material}
        material={hologramMaterial}
      >
        {/* <meshStandardMaterial color="white" roughness={0.2} metalness={0.5} /> */}
      </mesh>

      <mesh
        // castShadow
        // receiveShadow
        geometry={nodes.smallNail.geometry}
        // material={nodes.smallNail.material}
        material={hologramMaterial}
      >
        {/* <meshStandardMaterial color="white" roughness={0.2} metalness={0.5} /> */}
      </mesh>
    </group>
  );
}

useGLTF.preload("./models/Hand/hand.glb");
